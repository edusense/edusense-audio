This code is governed by OpenPose license:

OPENPOSE: MULTIPERSON KEYPOINT DETECTION
SOFTWARE LICENSE AGREEMENT
ACADEMIC OR NON-PROFIT ORGANIZATION NONCOMMERCIAL RESEARCH USE ONLY

BY USING OR DOWNLOADING THE SOFTWARE, YOU ARE AGREEING TO THE TERMS OF THIS LICENSE AGREEMENT.  IF YOU DO NOT AGREE WITH THESE TERMS, YOU MAY NOT USE OR DOWNLOAD THE SOFTWARE.

This is a license agreement ("Agreement") between your academic institution or non-profit organization or self (called "Licensee" or "You" in this Agreement) and Carnegie Mellon University (called "Licensor" in this Agreement).  All rights not specifically granted to you in this Agreement are reserved for Licensor. 

RESERVATION OF OWNERSHIP AND GRANT OF LICENSE: 
Licensor retains exclusive ownership of any copy of the Software (as defined below) licensed under this Agreement and hereby grants to Licensee a personal, non-exclusive, 
non-transferable license to use the Software for noncommercial research purposes, without the right to sublicense, pursuant to the terms and conditions of this Agreement.  As used in this Agreement, the term "Software" means (i) the actual copy of all or any portion of code for program routines made accessible to Licensee by Licensor pursuant to this Agreement, inclusive of backups, updates, and/or merged copies permitted hereunder or subsequently supplied by Licensor,  including all or any file structures, programming instructions, user interfaces and screen formats and sequences as well as any and all documentation and instructions related to it, and (ii) all or any derivatives and/or modifications created or made by You to any of the items specified in (i).

CONFIDENTIALITY: Licensee acknowledges that the Software is proprietary to Licensor, and as such, Licensee agrees to receive all such materials in confidence and use the Software only in accordance with the terms of this Agreement.  Licensee agrees to use reasonable effort to protect the Software from unauthorized use, reproduction, distribution, or publication.

COPYRIGHT: The Software is owned by Licensor and is protected by United 
States copyright laws and applicable international treaties and/or conventions.

PERMITTED USES:  The Software may be used for your own noncommercial internal research purposes. You understand and agree that Licensor is not obligated to implement any suggestions and/or feedback you might provide regarding the Software, but to the extent Licensor does so, you are not entitled to any compensation related thereto.

DERIVATIVES: You may create derivatives of or make modifications to the Software, however, You agree that all and any such derivatives and modifications will be owned by Licensor and become a part of the Software licensed to You under this Agreement.  You may only use such derivatives and modifications for your own noncommercial internal research purposes, and you may not otherwise use, distribute or copy such derivatives and modifications in violation of this Agreement.

BACKUPS:  If Licensee is an organization, it may make that number of copies of the Software necessary for internal noncommercial use at a single site within its organization provided that all information appearing in or on the original labels, including the copyright and trademark notices are copied onto the labels of the copies.

USES NOT PERMITTED:  You may not distribute, copy or use the Software except as explicitly permitted herein. Licensee has not been granted any trademark license as part of this Agreement and may not use the name or mark â€œOpenPose", "Carnegie Mellon" or any renditions thereof without the prior written permission of Licensor.

You may not sell, rent, lease, sublicense, lend, time-share or transfer, in whole or in part, or provide third parties access to prior or present versions (or any parts thereof) of the Software.

ASSIGNMENT: You may not assign this Agreement or your rights hereunder without the prior written consent of Licensor. Any attempted assignment without such consent shall be null and void.

TERM: The term of the license granted by this Agreement is from Licensee's acceptance of this Agreement by downloading the Software or by using the Software until terminated as provided below.

The Agreement automatically terminates without notice if you fail to comply with any provision of this Agreement.  Licensee may terminate this Agreement by ceasing using the Software.  Upon any termination of this Agreement, Licensee will delete any and all copies of the Software. You agree that all provisions which operate to protect the proprietary rights of Licensor shall remain in force should breach occur and that the obligation of confidentiality described in this Agreement is binding in perpetuity and, as such, survives the term of the Agreement.

FEE: Provided Licensee abides completely by the terms and conditions of this Agreement, there is no fee due to Licensor for Licensee's use of the Software in accordance with this Agreement.

DISCLAIMER OF WARRANTIES:  THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT WARRANTY OF ANY KIND INCLUDING ANY WARRANTIES OF PERFORMANCE OR MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE OR PURPOSE OR OF NON-INFRINGEMENT.  LICENSEE BEARS ALL RISK RELATING TO QUALITY AND PERFORMANCE OF THE SOFTWARE AND RELATED MATERIALS.

SUPPORT AND MAINTENANCE: No Software support or training by the Licensor is provided as part of this Agreement.  

EXCLUSIVE REMEDY AND LIMITATION OF LIABILITY: To the maximum extent permitted under applicable law, Licensor shall not be liable for direct, indirect, special, incidental, or consequential damages or lost profits related to Licensee's use of and/or inability to use the Software, even if Licensor is advised of the possibility of such damage.

EXPORT REGULATION: Licensee agrees to comply with any and all applicable 
U.S. export control laws, regulations, and/or other laws related to embargoes and sanction programs administered by the Office of Foreign Assets Control.

SEVERABILITY: If any provision(s) of this Agreement shall be held to be invalid, illegal, or unenforceable by a court or other tribunal of competent jurisdiction, the validity, legality and enforceability of the remaining provisions shall not in any way be affected or impaired thereby.

NO IMPLIED WAIVERS: No failure or delay by Licensor in enforcing any right or remedy under this Agreement shall be construed as a waiver of any future or other exercise of such right or remedy by Licensor.

GOVERNING LAW: This Agreement shall be construed and enforced in accordance with the laws of the Commonwealth of Pennsylvania without reference to conflict of laws principles.  You consent to the personal jurisdiction of the courts of this County and waive their rights to venue outside of Allegheny County, Pennsylvania.

ENTIRE AGREEMENT AND AMENDMENTS: This Agreement constitutes the sole and entire agreement between Licensee and Licensor as to the matter set forth herein and supersedes any previous agreements, understandings, and arrangements between the parties relating hereto.



 ************************************************************************

THIRD-PARTY SOFTWARE NOTICES AND INFORMATION

This project incorporates material from the project(s) listed below (collectively, "Third Party Code").  This Third Party Code is licensed to you under their original license terms set forth below.  We reserves all other rights not expressly granted, whether by implication, estoppel or otherwise.

 1.  Caffe, version 1.0.0, (https://github.com/BVLC/caffe/)

COPYRIGHT

All contributions by the University of California:
Copyright (c) 2014-2017 The Regents of the University of California (Regents)
All rights reserved.

All other contributions:
Copyright (c) 2014-2017, the respective contributors
All rights reserved.

Caffe uses a shared copyright model: each contributor holds copyright over
their contributions to Caffe. The project versioning records all such
contribution and copyright details. If a contributor wants to further mark
their specific copyright on a particular contribution, they should indicate
their copyright solely in the commit message of the change when it is
committed.

LICENSE

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met: 

 1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer. 
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

CONTRIBUTION AGREEMENT

By contributing to the BVLC/caffe repository through pull-request, comment,
or otherwise, the contributor releases their content to the
license and copyright terms herein.

 ************END OF THIRD-PARTY SOFTWARE NOTICES AND INFORMATION**********

7d6
< #define OPENPOSE_FLAGS_DISABLE_DISPLAY
12,15c11,12
< // Custom OpenPose flags
< // Display
< DEFINE_bool(no_display,                 false,
<     "Enable to disable the visual display.");
---
> // EduSense Dependencies
> #include <opencv2/opencv.hpp>
17,18c14,198
< // This worker will just read and return all the jpg files in a directory
< class WUserOutput : public op::WorkerConsumer<std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>>
---
> #include <boost/asio.hpp>
> #include <boost/asio/connect.hpp>
> #include <boost/date_time/posix_time/posix_time.hpp>
> #include <boost/date_time/posix_time/posix_time_io.hpp>
> #include <boost/date_time/local_time/local_time.hpp>
> #include <boost/date_time/time_zone_base.hpp>
> #include <boost/date_time/gregorian/gregorian.hpp>
> 
> #include "rapidjson/document.h"
> #include "rapidjson/writer.h"
> #include "rapidjson/stringbuffer.h"
> 
> #include "base64/base64.h"
> 
> namespace date_time = boost::date_time;
> namespace json = rapidjson;
> namespace local = boost::asio::local;
> namespace local_time = boost::local_time;
> namespace posix_time = boost::posix_time;
> 
> using boost::asio::ip::tcp;
> 
> // Custom EduSense flags
> DEFINE_bool(raw_image, false,
>             "Whether to stream raw image. if not set, only sends highly "
>             "compressed thumbnail");
> DEFINE_bool(use_unix_socket, false,
>             "Whether to use unix socket. if not set, use TCP");
> DEFINE_string(unix_socket, "",
>               "Socket address for IPC postprocessing pipeline");
> DEFINE_string(tcp_host, "",
>               "TCP host for tcp proprocessing pipeline");
> DEFINE_string(tcp_port, "",
>               "TCP port for tcp preprocessing pipeline");
> DEFINE_string(thumbnail_resolution, "240x135",
>               "Resolution for JPEG thumbnail");
> 
> struct UserDatum : public op::Datum {
>   posix_time::ptime timestamp;
> 
>   UserDatum() :
>     timestamp{posix_time::microsec_clock::universal_time()}
>   {}
> };
> 
> void parseDatum(bool rawFrame, std::shared_ptr<UserDatum> datum,
>                 std::string* str) {
>   json::StringBuffer s;
>   json::Writer<json::StringBuffer> writer(s);
>   writer.SetMaxDecimalPlaces(3);
> 
>   writer.StartObject();
>   std::string timestamp =
>     posix_time::to_iso_extended_string(datum->timestamp) + "Z";
> 
>   if (rawFrame) {
>     writer.Key("rawImage");
>     {
>       writer.StartObject();
> 
>       writer.Key("columns");
>       writer.Int(datum->cvInputData.cols);
> 
>       writer.Key("rows");
>       writer.Int(datum->cvInputData.rows);
> 
>       writer.Key("elemSize");
>       writer.Int(datum->cvInputData.elemSize());
> 
>       writer.Key("elemType");
>       writer.Int(datum->cvInputData.type());
> 
>       writer.Key("binary");
>       auto data = datum->cvInputData.data;
>       auto size = datum->cvInputData.dataend - datum->cvInputData.datastart;
>       std::string base64_image = base64_encode(data, size);
>       writer.String(base64_image.c_str());
> 
>       writer.EndObject();
>     }
>   } else {
>     writer.Key("thumbnail");
>     {
>       writer.StartObject();
> 
>       writer.Key("originalColumns");
>       writer.Int(datum->cvInputData.cols);
> 
>       writer.Key("originalRows");
>       writer.Int(datum->cvInputData.rows);
> 
>       writer.Key("binary");
>       std::string ext(".jpg");
>       std::vector<int> comp_params;
>       comp_params.push_back(CV_IMWRITE_JPEG_QUALITY);
>       comp_params.push_back(50);
> 
>       cv::Mat thumbnail;
>       op::Point<int> resolution =
>         op::flagsToPoint(FLAGS_thumbnail_resolution, "480x270");
>       cv::Size size(resolution.x, resolution.y);
>       cv::resize(datum->cvInputData, thumbnail, size);
> 
>       std::vector<uint8_t> buf;
>       cv::imencode(ext, thumbnail, buf, comp_params);
> 
>       std::string base64_image = base64_encode(buf.data(), buf.size());
>       writer.String(base64_image.c_str());
> 
>       writer.EndObject();
>     }
>   }
> 
>   writer.Key("people");
>   {
>     writer.StartArray();
> 
>     for (auto person = 0; person < datum->poseKeypoints.getSize(0); person++) {
>       writer.StartObject();
> 
>       writer.Key("body");
>       writer.StartArray();
>       const auto& poseKeypoints = datum->poseKeypoints;
>       for (auto bodyPart = 0; bodyPart < poseKeypoints.getSize(1); bodyPart++) {
>         writer.Uint(poseKeypoints[{person, bodyPart, 0}]);
>         writer.Uint(poseKeypoints[{person, bodyPart, 1}]);
>         writer.Double(poseKeypoints[{person, bodyPart, 2}]);
>       }
>       writer.EndArray();
> 
>       if (FLAGS_face) {
>         writer.Key("face");
>         writer.StartArray();
>         const auto& faceKeypoints = datum->faceKeypoints;
>         for (auto facePart = 0; facePart < faceKeypoints.getSize(1); facePart++) {
>           writer.Uint(faceKeypoints[{person, facePart, 0}]);
>           writer.Uint(faceKeypoints[{person, facePart, 1}]);
>           writer.Double(faceKeypoints[{person, facePart, 2}]);
>         }
>         writer.EndArray();
>       }
> 
>       if (FLAGS_hand) {
>         writer.Key("leftHand");
>         writer.StartArray();
>         const auto& leftHandKeypoints = datum->handKeypoints[0];
>         for (auto handPart = 0; handPart < leftHandKeypoints.getSize(1); handPart++) {
>           writer.Uint(leftHandKeypoints[{person, handPart, 0}]);
>           writer.Uint(leftHandKeypoints[{person, handPart, 1}]);
>           writer.Double(leftHandKeypoints[{person, handPart, 2}]);
>         }
>         writer.EndArray();
> 
>         writer.Key("rightHand");
>         writer.StartArray();
>         const auto& rightHandKeypoints = datum->handKeypoints[1];
>         for (auto handPart = 0; handPart < rightHandKeypoints.getSize(1); handPart++) {
>           writer.Uint(rightHandKeypoints[{person, handPart, 0}]);
>           writer.Uint(rightHandKeypoints[{person, handPart, 1}]);
>           writer.Double(rightHandKeypoints[{person, handPart, 2}]);
>         }
>         writer.EndArray();
>       }
> 
>       writer.Key("openposeId");
>       writer.Uint(person + 1);  // set openposeId start at 1
> 
>       writer.EndObject();
>     }
> 
>     writer.EndArray();
>   }
> 
>   writer.Key("frameNumber");
>   writer.Uint(datum->frameNumber + 1);  // openpose frame number starts at 0
>   writer.Key("timestamp");
>   writer.String(timestamp.c_str());
> 
>   writer.EndObject();
> 
>   *str = s.GetString();
> }
> 
> // This worker will just invert the image
> class WUserPostProcessing : public op::Worker<std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>>
20a201,205
>     WUserPostProcessing()
>     {
>         // User's constructor here
>     }
> 
23c208
<     void workConsumer(const std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>& datumsPtr)
---
>     void work(std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>& datumsPtr)
24a210,212
>         // User's post-processing (after OpenPose processing & before OpenPose outputs) here
>             // datumPtr->cvOutputData: rendered frame with pose or heatmaps
>             // datumPtr->poseKeypoints: Array<float> with the estimated pose
27,29d214
<             // User's displaying/saving/other processing here
<                 // datumPtr->cvOutputData: rendered frame with pose or heatmaps
<                 // datumPtr->poseKeypoints: Array<float> with the estimated pose
31,88c216,217
<             {
<                 // Show in command line the resulting pose keypoints for body, face and hands
<                 op::log("\nKeypoints:");
<                 // Accesing each element of the keypoints
<                 const auto& poseKeypoints = datumsPtr->at(0)->poseKeypoints;
<                 op::log("Person pose keypoints:");
<                 for (auto person = 0 ; person < poseKeypoints.getSize(0) ; person++)
<                 {
<                     op::log("Person " + std::to_string(person) + " (x, y, score):");
<                     for (auto bodyPart = 0 ; bodyPart < poseKeypoints.getSize(1) ; bodyPart++)
<                     {
<                         std::string valueToPrint;
<                         for (auto xyscore = 0 ; xyscore < poseKeypoints.getSize(2) ; xyscore++)
<                         {
<                             valueToPrint += std::to_string(   poseKeypoints[{person, bodyPart, xyscore}]   ) + " ";
<                         }
<                         op::log(valueToPrint);
<                     }
<                 }
<                 op::log(" ");
<                 // Alternative: just getting std::string equivalent
<                 op::log("Face keypoints: " + datumsPtr->at(0)->faceKeypoints.toString());
<                 op::log("Left hand keypoints: " + datumsPtr->at(0)->handKeypoints[0].toString());
<                 op::log("Right hand keypoints: " + datumsPtr->at(0)->handKeypoints[1].toString());
<                 // Heatmaps
<                 const auto& poseHeatMaps = datumsPtr->at(0)->poseHeatMaps;
<                 if (!poseHeatMaps.empty())
<                 {
<                     op::log("Pose heatmaps size: [" + std::to_string(poseHeatMaps.getSize(0)) + ", "
<                             + std::to_string(poseHeatMaps.getSize(1)) + ", "
<                             + std::to_string(poseHeatMaps.getSize(2)) + "]");
<                     const auto& faceHeatMaps = datumsPtr->at(0)->faceHeatMaps;
<                     op::log("Face heatmaps size: [" + std::to_string(faceHeatMaps.getSize(0)) + ", "
<                             + std::to_string(faceHeatMaps.getSize(1)) + ", "
<                             + std::to_string(faceHeatMaps.getSize(2)) + ", "
<                             + std::to_string(faceHeatMaps.getSize(3)) + "]");
<                     const auto& handHeatMaps = datumsPtr->at(0)->handHeatMaps;
<                     op::log("Left hand heatmaps size: [" + std::to_string(handHeatMaps[0].getSize(0)) + ", "
<                             + std::to_string(handHeatMaps[0].getSize(1)) + ", "
<                             + std::to_string(handHeatMaps[0].getSize(2)) + ", "
<                             + std::to_string(handHeatMaps[0].getSize(3)) + "]");
<                     op::log("Right hand heatmaps size: [" + std::to_string(handHeatMaps[1].getSize(0)) + ", "
<                             + std::to_string(handHeatMaps[1].getSize(1)) + ", "
<                             + std::to_string(handHeatMaps[1].getSize(2)) + ", "
<                             + std::to_string(handHeatMaps[1].getSize(3)) + "]");
<                 }
< 
<                 // Display results (if enabled)
<                 if (!FLAGS_no_display)
<                 {
<                     // Display rendered output image
<                     cv::imshow(OPEN_POSE_NAME_AND_VERSION + " - Tutorial C++ API", datumsPtr->at(0)->cvOutputData);
<                     // Display image and sleeps at least 1 ms (it usually sleeps ~5-10 msec to display the image)
<                     const char key = (char)cv::waitKey(1);
<                     if (key == 27)
<                         this->stop();
<                 }
<             }
---
>                 for (auto& datumPtr : *datumsPtr)
>                     cv::bitwise_not(datumPtr->cvOutputData, datumPtr->cvOutputData);
98c227,356
< void configureWrapper(op::Wrapper& opWrapper)
---
> // unix socket consumer
> using UserDatumVector =
>   std::shared_ptr<std::vector<std::shared_ptr<UserDatum>>>;
> class WUnixSocketOutput : public op::WorkerConsumer<UserDatumVector> {
>  public:
>   explicit WUnixSocketOutput(const std::string& address)
>     : op::WorkerConsumer<UserDatumVector>(), mAddress(address) {}
>   ~WUnixSocketOutput() {
>     uint32_t size = 0;
>     boost::asio::write(*mSocket, boost::asio::buffer(&size, sizeof(size)));
>     mSocket->close();
>     delete mSocket;
>     delete mEndpoint;
>   }
> 
>   void initializationOnThread() {
>     // The io context is required for all I/O
>     boost::asio::io_service ioc;
>     mEndpoint = new local::stream_protocol::endpoint(mAddress.c_str());
>     mSocket = new local::stream_protocol::socket(ioc);
> 
>     // retry 10 times
>     bool connected = false;
>     for (int i = 0; i < 30; i++) {
>       try {
>         mSocket->connect(*mEndpoint);
>         connected = true;
>         break;
>       } catch (const std::exception& e) {
>         std::this_thread::sleep_for(std::chrono::seconds(1));
>       }
>     }
> 
>     if (!connected) {
>       op::error("failed to establish connection to unix socket", __LINE__, __FUNCTION__, __FILE__);
>     }
>   }
> 
>   void workConsumer(const std::shared_ptr<std::vector<std::shared_ptr<UserDatum>>>& datumsPtr) {
>     try {
>       if (datumsPtr != nullptr && !datumsPtr->empty()) {
>         const auto profilerKey = op::Profiler::timerInit(__LINE__, __FUNCTION__, __FILE__);
> 
>         // Parse output into json
>         std::string parsedJsonStr;
>         parseDatum(FLAGS_raw_image, datumsPtr->at(0), &parsedJsonStr);
>         uint32_t size = parsedJsonStr.size();
>         boost::asio::write(*this->mSocket, boost::asio::buffer(&size, sizeof(size)));
>         boost::asio::write(*this->mSocket, boost::asio::buffer(parsedJsonStr.c_str(), parsedJsonStr.size()));
> 
>         op::Profiler::timerEnd(profilerKey);
>         op::Profiler::printAveragedTimeMsOnIterationX(profilerKey, __LINE__, __FUNCTION__, __FILE__);
>       }
>     } catch (const std::exception& e) {
>       this->stop();
>       op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
>     }
>   }
> 
>  private:
>   std::string mAddress;
>   local::stream_protocol::endpoint* mEndpoint;
>   local::stream_protocol::socket* mSocket;
> };
> 
> // tcp socket consumer
> class WTCPSocketOutput : public op::WorkerConsumer<UserDatumVector> {
>  public:
>   explicit WTCPSocketOutput(const std::string& host, const std::string& port)
>     : op::WorkerConsumer<UserDatumVector>(), mHost(host), mPort(port) {}
>   ~WTCPSocketOutput() {
>     uint32_t size = 0;
>     boost::asio::write(*this->mSocket, boost::asio::buffer(&size, sizeof(size)));
>     mSocket->close();
>     delete mSocket;
>   }
> 
>   void initializationOnThread() {
>     // The io context is required for all I/O
>     boost::asio::io_service ioc;
> 
>     mSocket = new tcp::socket(ioc);
>     mResolver = new tcp::resolver(ioc);
> 
>     // retry 10 times
>     bool connected = false;
>     for (int i = 0; i < 30; i++) {
>       try {
>         boost::asio::connect(*mSocket, mResolver->resolve({mHost, mPort}));
>         connected = true;
>         break;
>       } catch (const std::exception& e) {
>         std::this_thread::sleep_for(std::chrono::seconds(1));
>       }
>     }
> 
>     if (!connected) {
>       op::error("failed to establish connection to tcp socket", __LINE__, __FUNCTION__, __FILE__);
>     }
>   }
> 
>   void workConsumer(const std::shared_ptr<std::vector<std::shared_ptr<UserDatum>>>& datumsPtr) {
>     try {
>       if (datumsPtr != nullptr && !datumsPtr->empty()) {
>         const auto profilerKey = op::Profiler::timerInit(__LINE__, __FUNCTION__, __FILE__);
> 
>         // Parse output into json
>         std::string parsedJsonStr;
>         parseDatum(FLAGS_raw_image, datumsPtr->at(0), &parsedJsonStr);
>         uint32_t size = parsedJsonStr.size();
>         boost::asio::write(*mSocket, boost::asio::buffer(&size, sizeof(size)));
>         boost::asio::write(*mSocket, boost::asio::buffer(parsedJsonStr.c_str(), parsedJsonStr.size()));
> 
>         op::Profiler::timerEnd(profilerKey);
>         op::Profiler::printAveragedTimeMsOnIterationX(profilerKey, __LINE__, __FUNCTION__, __FILE__);
>       }
>     } catch (const std::exception& e) {
>       this->stop();
>       op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
>     }
>   }
> 
>  private:
>   std::string mHost;
>   std::string mPort;
>   tcp::socket* mSocket;
>   tcp::resolver* mResolver;
> };
> 
> void configureWrapper(op::WrapperT<UserDatum>& opWrapper)
149,150c407,415
<         // GUI (Display)
<         auto wUserOutput = std::make_shared<WUserOutput>();
---
>         std::shared_ptr<op::WorkerConsumer<UserDatumVector>> wUserOutput;
> 
>         // Processing
>         if (FLAGS_use_unix_socket) {
>           wUserOutput = std::make_shared<WUnixSocketOutput>(FLAGS_unix_socket);
>         } else {
>           wUserOutput = std::make_shared<WTCPSocketOutput>(FLAGS_tcp_host, FLAGS_tcp_port);
>         }
> 
152,153c417,418
<         const auto workerOutputOnNewThread = true;
<         opWrapper.setWorker(op::WorkerType::Output, wUserOutput, workerOutputOnNewThread);
---
>         const auto workerProcessingOnNewThread = true;
>         opWrapper.setWorker(op::WorkerType::Output, wUserOutput, workerProcessingOnNewThread);
194c459,462
<         // No GUI. Equivalent to: opWrapper.configure(op::WrapperStructGui{});
---
>         // GUI (comment or use default argument to disable any visual output)
>         const op::WrapperStructGui wrapperStructGui{
>             op::flagsToDisplayMode(FLAGS_display, FLAGS_3d), !FLAGS_no_gui_verbose, FLAGS_fullscreen};
>         opWrapper.configure(wrapperStructGui);
214c482
<         op::Wrapper opWrapper;
---
>         op::WrapperT<UserDatum> opWrapper;
